#!/usr/bin/env python3

import argparse
import os
import subprocess
import re
import sys
import random
import signal
from itertools import chain

maps = [
    "1337Tree", "Aligned", "Alone", "Arena", "Barbell",
    "Barrier", "Blitzkrieg", "Boxed", "BugTrap", "Bullseye",
    "Captive", "Caterpillar", "Chess", "Chevron", "Clusters",
    "Conga", "Cramped", "CropCircles", "Croquembouche", "CrossFire",
    "DarkSide", "DeathStar", "Defenseless", "DenseForest", "DigMeOut",
    "Enclosure", "Fancy", "FlappyTree", "GiantForest", "Grass",
    "GreatDekuTree", "GreenHouse", "HedgeMaze", "HiddenTunnel", "HouseDivided",
    "Hurdle", "Interference", "Lanes", "Levels", "LilForts",
    "LilMaze", "LineOfFire", "MagicWood", "Maniple", "Misaligned",
    "ModernArt", "MyFirstMap", "OMGTree", "Ocean", "Oxygen",
    "PacMan", "PasscalsTriangles", "PeacefulEncounter", "Planets", "Present",
    "PureImagination", "Shortcut", "Shrubbery", "Slant", "Snowflake",
    "SparseForest", "Sprinkles", "Standoff", "TheOtherSide", "TicTacToe",
    "TreeFarm", "Turtle", "Waves", "Whirligig", "shrine",
    "Sacrifice",
    "BattlecodeFinalShowdown",
]
lowerMaps = [m.lower() for m in maps]

parser = argparse.ArgumentParser(description='Run BattleCode Bots')
parser.add_argument("-m", "--map", help="Which map to use", choices=lowerMaps, default=maps[0], type=str.lower)
parser.add_argument("-a", "--teamA", help="Team A")
parser.add_argument("-b", "--teamB", help="Team B")
parser.add_argument("--tournament", help="Play multiple games and rank the teams", action="store_true")
parser.add_argument("-q", "--quiet", help="Don't print bot logs", action="store_true")
parser.add_argument("--seed", help="Seed for the game or tournament", type=int)
parser.add_argument("--threads", help="Number of threads to use", type=int, default=2)
parser.add_argument("--dnaA", help="Genetic information for Team A", nargs="*")
parser.add_argument("--dnaB", help="Genetic information for Team B", nargs="*")
parser.add_argument("--serverJarPath", help="Path to server jar file")
args = parser.parse_args()

if args.threads <= 0:
    print("Thread count must be positive")
    exit(1)

if args.threads % 2 != 0 and args.threads != 1:
    print("Only supports an even number of threads or a single thread")
    exit(1)

red = (201, 27, 0)
green = (0, 194, 0)
yellow = (199, 196, 0)
gray = (150, 150, 150)

colorFormat = "\x1b[38;2;{0[0]};{0[1]};{0[2]}m"
redStr = colorFormat.format(red)
greenStr = colorFormat.format(green)
yellowStr = colorFormat.format(yellow)
grayStr = colorFormat.format(gray)
reset = "\033[0m"
clearScreen = "\033[2J"
active_commands = []

print(yellowStr + "Building..." + reset, end="")
sys.stdout.flush()
buildOutput = subprocess.check_output(["./gradlew", "listBattleCodeJar"]).decode('utf-8')

if args.serverJarPath is not None:
    battlecodeJarPath = args.serverJarPath
else:
    battlecodeJarPath = re.search("[^\n]*\.jar", buildOutput).group(0)
    # battlecodeJarPath = "/Users/arong/Programming/competitions/battlecode2017/battlecode-server/build/libs/battlecode-server.jar"

print("\r", end="")


def execute(cmd, quiet):
    popen = subprocess.Popen(cmd,
                             bufsize=-1,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.DEVNULL if quiet else None,
                             universal_newlines=False
                             )

    active_commands.append(popen)
    while True:
        b = popen.stdout.readline()
        if b == b"":
            break
        else:
            s = b.decode('utf-8')
            if not quiet:
                print(s, end="")
            yield s

    popen.stdout.close()
    return_code = popen.wait()
    active_commands.remove(popen)

    if return_code:
        raise subprocess.CalledProcessError(return_code, cmd)

    # return "\n".join(lines)


def run(teamA, teamB, maps, quiet, seed, teamAdna, teamBdna):
    jvmArgs = [
        "java",
        "-classpath", battlecodeJarPath,
        "-Dbc.server.mode=headless",
        "-Dbc.game.team-a=bot",
        "-Dbc.game.team-b=bot",
        "-Dbc.server.map-path=maps",
        "-Dbc.server.debug=" + str(not quiet),
        "-Dbc.server.debug=" + str(not quiet),
        "-Dbc.game.maps=" + ",".join(maps)
    ]

    if teamA is not None:
        jvmArgs.append("-Dbc.game.team-a.url=" + os.path.join(os.getcwd(), "backups/" + teamA))
    else:
        jvmArgs.append("-Dbc.game.team-a.url=build/classes")

    if teamB is not None:
        jvmArgs.append("-Dbc.game.team-b.url=" + os.path.join(os.getcwd(), "backups/" + teamB))
    else:
        jvmArgs.append("-Dbc.game.team-b.url=build/classes")

    if seed is not None:
        jvmArgs.append("-Dbc.testing.seed=" + str(seed))

    if teamAdna is not None:
        for i, item in enumerate(teamAdna):
            jvmArgs.append("-Dbc.testing.team-a.genetic." + str(i) + "=" + item)

    if teamBdna is not None:
        for i, item in enumerate(teamBdna):
            jvmArgs.append("-Dbc.testing.team-b.genetic." + str(i) + "=" + item)

    jvmArgs.append("battlecode.server.Main")
    winRegex = re.compile(r"bot \(([AB])\) wins \(round (\d+)\)")
    reasonRegex = re.compile(r"Reason: The winning team won ([^\n\.]+)")
    mapIndex = 0
    try:
        gen = execute(jvmArgs, quiet)
        for line in gen:
            if "ARCHON SACRIFICE" in line:
                # Important event
                print("\r" + redStr + "An archon was sacrificed in the map '" + maps[mapIndex] + "'" + reset)

            win = winRegex.search(line)
            if win is not None:
                reason = reasonRegex.search(next(gen))

                winningTeam = win.group(1)
                round = int(win.group(2))
                reason = reason.group(1)
                mapIndex += 1
                yield (winningTeam, round, reason)
    except subprocess.CalledProcessError:
        print("\rServer crashed. Ignoring the rest of the maps")
        return


def printResult(result):
    team = result[0]
    round = result[1]
    reason = result[2]
    teamStr = (greenStr if team == "A" else redStr) + team + reset
    print(teamStr + " won at round " + str(round) + " " + reason)


# Make sure the seed is reset to 0 even if the user terminates the program
def sigint(signal, frame):
    for p in active_commands:
        p.kill()

    sys.exit(0)


def divide_into_chunks(items, number_of_chunks):
    num = int(len(items) / number_of_chunks)
    result = [items[i:i + num] for i in range(0, (number_of_chunks - 1) * num, num)]
    result.append(items[(number_of_chunks - 1) * num:])
    return result


def run_tournament_part(teamA, teamB, dnaA, dnaB, switch, seed, maps):
    if switch:
        teamA, teamB = teamB, teamA
        dnaA, dnaB = dnaB, dnaA

    gen = run(teamA, teamB, maps, True, seed, dnaA, dnaB)

    for map in maps:
        mapStr = yellowStr + map.ljust(12) + reset + " " + ("B vs A" if switch else "A vs B") + ": "
        sys.stdout.flush()
        result = next(gen)

        if switch:
            result = ("B" if result[0] == "A" else "A", result[1], result[2])

        print("\r" + mapStr, end="                  ")
        printResult(result)

        yield result[0] == "A"


def parallel(chains):
    chains = chains[:]
    while len(chains) > 0:
        toRemove = []
        for chain in chains:
            try:
                n = next(chain)
                yield n
            except StopIteration:
                toRemove.append(chain)

        for r in toRemove:
            chains.remove(r)


signal.signal(signal.SIGINT, sigint)

startSeed = args.seed if args.seed is not None else 0
if args.tournament:
    teamAwins = 0
    totalCount = 0

    for seed in range(startSeed, startSeed + 4):
        if seed != startSeed:
            print("\n\nContinuing with new seed...\n")

        # Run AvsB and BvsA in parallel
        if args.threads == 1:
            g1 = run_tournament_part(args.teamA, args.teamB, args.dnaA, args.dnaB, False, seed, maps)
            g2 = run_tournament_part(args.teamA, args.teamB, args.dnaA, args.dnaB, True, seed, maps)
            for teamAwon in chain(g1, g2):
                if teamAwon:
                    teamAwins += 1
                totalCount += 1
        else:

            map_chunks = divide_into_chunks(maps, args.threads // 2)
            # At least 2 threads
            chains = []
            for chunk in map_chunks:
                g1 = run_tournament_part(args.teamA, args.teamB, args.dnaA, args.dnaB, False, seed, chunk)
                g2 = run_tournament_part(args.teamA, args.teamB, args.dnaA, args.dnaB, True, seed, chunk)
                chains.append(g1)
                chains.append(g2)

            for teamAwon in parallel(chains):
                if teamAwon:
                    teamAwins += 1
                totalCount += 1
                if totalCount > 100:
                    percentage = (teamAwins / totalCount) * 100 if totalCount > 0 else 50
                    print("Team A has won %.1f%% of the time (%s of %s)" % (percentage, teamAwins, totalCount), end="                  ")

else:
    actualMap = maps[lowerMaps.index(args.map.lower())]
    printResult(next(run(args.teamA, args.teamB, [actualMap], args.quiet, startSeed, args.dnaA, args.dnaB)))
